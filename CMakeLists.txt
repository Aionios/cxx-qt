# TODO: figure out what the actual hard minimum is
cmake_minimum_required(VERSION 3.16)

project(cxx_example)
set(APP_NAME hello)

# TODO: figure out if RelWithDebInfo is a thing in Rust and fix accordingly
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CARGO_CMD cargo build)
    set(TARGET_DIR "debug")
else ()
    set(CARGO_CMD cargo build --release)
    set(TARGET_DIR "release")
endif ()

# We list the rust source files that lead to generated C++ files here
# so that CMake is forced to re-run cargo and parse the list it produces
# during the config stage when this list of source files changes.
set(
    RUST_SRC
    lib.rs
)
file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/target/cxx-qt")
file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/target/cxx-qt/rust_sources.txt" "${RUST_SRC}")

# Run cargo during config to ensure the cpp source file list is created
execute_process(
    COMMAND ${CARGO_CMD}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

# Now we can read the list of C++ files that cargo produced
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/target/cxx-qt/cpp_sources.txt" GEN_SOURCES)

# We also want CMake to compile the C++ source files that we have created ourselves
# i.e. those that were not generated by build.rs
set (
    CPP_SOURCES
    src/test.cpp
)

# And specify that we want CMake to build these sources
add_executable(${APP_NAME} ${CPP_SOURCES} ${GEN_SOURCES})
target_include_directories(${APP_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")
target_include_directories(${APP_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/target/cxx-qt/include")

# We also list the .a produced by cargo as a dependency so that cargo gets a
# chance to rebuild the .a every time that a cmake build is run.
# TODO: use correct binary name on windows
set(RUST_PART_LIB "${CMAKE_CURRENT_SOURCE_DIR}/target/${TARGET_DIR}/librust.a")
add_custom_target(
    rustlib
    COMMAND ${CARGO_CMD}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
add_dependencies(${APP_NAME} rustlib)

# The Rust lib also needs to be linked to pthread and dl
# TODO: figure out the equivalent on windows
target_link_libraries(${APP_NAME} ${RUST_PART_LIB} pthread dl)

# Add cargo tests
add_test(NAME cargo_cxx_qt_tests COMMAND cargo test --manifest-path ${CMAKE_CURRENT_SOURCE_DIR}/cxx-qt/Cargo.toml)

# Enable testing
enable_testing()
